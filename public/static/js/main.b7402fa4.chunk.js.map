{"version":3,"sources":["components/SearchBar.js","components/CompanyGraph.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","handleOnSelect","item","onSelectCompany","state","data","selection","this","fetchData","fetch","then","res","a","json","setState","catch","error","console","log","items","fuseOptions","keys","autoFocus","onSelect","resultStringKeyName","placeholder","styling","zIndex","React","Component","name","uv","pv","amt","CompanyGraph","style","width","ResponsiveContainer","height","LineChart","syncId","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Line","type","stroke","fill","Brush","AreaChart","Area","PureComponent","demoUrl","App","useState","company","setCompany","setGraphShown","className","selectedCompany","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7402fa4.chunk.js","sourcesContent":["import React from 'react';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            selection: \"\"\n        }\n      }\n\n    componentDidMount(){\n      this.fetchData();\n    }\n\n    handleOnSelect = (item) =>{\n      this.props.onSelectCompany(item)\n    };\n  \n  \n    fetchData(){\n        const url = '/api/v1/company';\n        fetch(url)\n            .then(async(res) => {\n                const a = await res.json()\n                this.setState({data: a})\n                return a\n            })\n            .catch(error => console.log(error))\n    }\n  \n    render() {\n      return (\n        <ReactSearchAutocomplete\n            items={this.state.data}\n            fuseOptions={{ keys: [\"symbol\", \"name\"] }} // Search on both fields\n            autoFocus\n            onSelect={this.handleOnSelect}\n            resultStringKeyName=\"symbol\" // String to display in the results\n            placeholder={'Stock symbol'}\n            styling={{ zIndex: 2 }} // To display it on top of the search box below\n          />\n      );\n    }\n  }\n\nexport default SearchBar;\n","import React, { PureComponent } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Brush,\n  AreaChart,\n  Area,\n  ResponsiveContainer,\n} from 'recharts';\n\nconst data = [\n  {\n    name: 'Page A',\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: 'Page B',\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: 'Page C',\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: 'Page D',\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: 'Page E',\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: 'Page F',\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: 'Page G',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport default class CompanyGraph extends PureComponent {\n  static demoUrl = 'https://codesandbox.io/s/synchronized-line-charts-zc3nl';\n\n  render() {\n    return (\n      <div style={{ width: '100%' }}>\n        <h4>A demo of synchronized AreaCharts</h4>\n\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <LineChart\n            width={500}\n            height={200}\n            data={data}\n            syncId=\"anyId\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 0,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n          </LineChart>\n        </ResponsiveContainer>\n        <p>Maybe some other content</p>\n\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <LineChart\n            width={500}\n            height={200}\n            data={data}\n            syncId=\"anyId\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 0,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n            <Brush />\n          </LineChart>\n        </ResponsiveContainer>\n\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <AreaChart\n            width={500}\n            height={200}\n            data={data}\n            syncId=\"anyId\"\n            margin={{\n              top: 10,\n              right: 30,\n              left: 0,\n              bottom: 0,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis />\n            <Tooltip />\n            <Area type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n          </AreaChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  }\n}\n","import React, { useState }  from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport CompanyGraph from './components/CompanyGraph';\n\nconst App = () => {\n  const [company, setCompany] = useState(\"\");\n  const [graphShown, setGraphShown] = useState(false);\n\n  function refreshChart() {\n    \n  }\n\n  function handleSearchSelection(item) {\n    setCompany({item});\n    setGraphShown(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchBar onSelectCompany={handleSearchSelection}/>\n      <br/>\n      <CompanyGraph selectedCompany={company}></CompanyGraph>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}