{"version":3,"sources":["components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","text","useQuery","fetch","then","res","json","response","console","log","catch","error","refetchOnWindowFocus","enabled","isLoading","data","refetch","onSelect","placeholder","value","callback","record","queryCache","QueryCache","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAuCeA,MAnCf,SAAoBC,GAChB,MAAeC,mBAAS,IAAjBC,EAAP,oBAEA,EAA4CC,kBACxC,CAAC,MAAO,CAAED,SACVE,MAAM,iBACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GAAeC,QAAQC,IAAI,sBAAuBF,MACxDG,OAAM,SAACC,GAAYH,QAAQC,IAAI,kCAAmCE,MACnE,CACEC,sBAAsB,EACtBC,SAAS,IARPC,EAAR,EAAQA,UAAWH,EAAnB,EAAmBA,MAAOI,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,QAgBhC,OAAIF,EAAkB,6CAClBH,EAAc,0CAAaA,KAG/B,8BACQ,cAAC,IAAD,CACIM,SAXQ,WAEpBD,KAUYE,YAAa,cAAgBH,EAC7BI,MAAM,MACNJ,KAAMA,EACNK,SAAU,SAACC,GAAD,OAAYb,QAAQC,IAAIY,SC5B5CC,EAAa,IAAIC,aAURC,EARH,WACV,OACE,cAAC,sBAAD,CAAqBF,WAAYA,EAAjC,SACE,cAAC,EAAD,OCESG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.532f4ec7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport useQuery from 'react-query'\nimport ReactSearchBox from \"react-search-box\";\n\nfunction SearchBar (props) {\n    const [text] = useState(\"\");\n\n    const { isLoading, error, data, refetch } = useQuery(\n        [\"key\", { text }],\n        fetch('/api/v1/tests')\n        .then(res => res.json())\n        .then((response) => { console.log(\"Test datas response\", response); })\n        .catch((error) => { console.log(\"Error while fetching test datas\", error); }),\n        {\n          refetchOnWindowFocus: false,\n          enabled: false // needed to handle refetchs manually\n        }\n    );\n    const handleClick = () => {\n    // manually refetch\n    refetch();\n    };\n\n    if (isLoading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n    <div>\n            <ReactSearchBox\n                onSelect={handleClick}\n                placeholder={\"Placeholder\" + data}\n                value=\"Doe\"\n                data={data}\n                callback={(record) => console.log(record)}\n            />\n    </div>\n    )\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport { QueryCache, QueryClientProvider } from 'react-query';\n\nconst queryCache = new QueryCache()\n\nconst App = () => {\n  return (\n    <QueryClientProvider queryCache={queryCache}>\n      <SearchBar/>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}