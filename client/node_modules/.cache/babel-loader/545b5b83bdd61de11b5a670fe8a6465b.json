{"ast":null,"code":"var _jsxFileName = \"/Users/collinpreston/Documents/GitHub/fails-to-deliver/client/src/components/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './Home.css';\nimport SearchBar from './SearchBar';\nimport CompanyGraph from './CompanyGraph';\nimport moment from 'moment';\nimport DocumentMeta from 'react-document-meta';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const meta = {\n    title: 'Home',\n    description: 'failsdata.com home page',\n    canonical: 'http://failsdata.com/',\n    meta: {\n      charset: 'utf-8',\n      name: {\n        keywords: 'stock,SEC,fails,FTD,GME'\n      }\n    }\n  };\n  const [companySymbol, setCompanySymbol] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\");\n  const [companyData, setCompanyData] = useState([]);\n  const [graphShown, setGraphShown] = useState(false);\n  const [companyLastUpdatedOn, setCompanyLastUpdatedOn] = useState(\"\");\n\n  function fetchSettlementsForCompany(companyId) {\n    const url = `/api/v1/company/${companyId}`;\n    fetch(url).then(async res => {\n      const a = await res.json();\n      let newData = a.settlements.map(item => {\n        return { ...item,\n          settlement_date: moment(item.settlement_date).format('MMM DD, YYYY')\n        };\n      });\n      setCompanyLastUpdatedOn(a.data_last_updated);\n      setCompanyData(newData);\n      return a;\n    }).catch(error => console.log(error));\n  }\n\n  function handleSearchSelection(item) {\n    setCompanySymbol(item.symbol);\n    console.log(item);\n    setCompanyName(item.name);\n    setGraphShown(true);\n    fetchSettlementsForCompany(item.id);\n  }\n\n  function resetHomePage() {\n    setGraphShown(false);\n  }\n\n  let graph, dataRetrievedDate;\n\n  if (graphShown) {\n    graph = /*#__PURE__*/_jsxDEV(CompanyGraph, {\n      selectedCompanyName: companyName,\n      selectedCompanySymbol: companySymbol,\n      selectedCompanyData: companyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n    dataRetrievedDate = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Data last updated on \" + moment(companyLastUpdatedOn).format('MMM DD, YYYY')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(DocumentMeta, { ...meta,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Home\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Title\",\n        onClick: resetHomePage,\n        children: \"Fails-to-Deliver Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"SearchBar\",\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {\n          onSelectCompany: handleSearchSelection,\n          onClearSearch: resetHomePage,\n          style: {\n            width: '50%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), graph, dataRetrievedDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"HjIkHqZrgSnsDADzzWgtKVPehnU=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/collinpreston/Documents/GitHub/fails-to-deliver/client/src/components/Home.js"],"names":["React","useState","SearchBar","CompanyGraph","moment","DocumentMeta","Home","meta","title","description","canonical","charset","name","keywords","companySymbol","setCompanySymbol","companyName","setCompanyName","companyData","setCompanyData","graphShown","setGraphShown","companyLastUpdatedOn","setCompanyLastUpdatedOn","fetchSettlementsForCompany","companyId","url","fetch","then","res","a","json","newData","settlements","map","item","settlement_date","format","data_last_updated","catch","error","console","log","handleSearchSelection","symbol","id","resetHomePage","graph","dataRetrievedDate","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './Home.css';\nimport SearchBar from './SearchBar';\nimport CompanyGraph from './CompanyGraph';\nimport moment from 'moment';\nimport DocumentMeta from 'react-document-meta';\n\nconst Home = () => {\n\n  const meta = {\n    title: 'Home',\n    description: 'failsdata.com home page',\n    canonical: 'http://failsdata.com/',\n    meta: {\n      charset: 'utf-8',\n      name: {\n        keywords: 'stock,SEC,fails,FTD,GME'\n      }\n    }\n  };\n\n\n  const [companySymbol, setCompanySymbol] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\");\n  const [companyData, setCompanyData] = useState([]);\n  const [graphShown, setGraphShown] = useState(false);\n  const [companyLastUpdatedOn, setCompanyLastUpdatedOn] = useState(\"\");\n\n  function fetchSettlementsForCompany(companyId) {\n    const url = `/api/v1/company/${companyId}`;\n    fetch(url)\n      .then(async (res) => {\n        const a = await res.json()\n        let newData = a.settlements.map(item => {\n          return { ...item, settlement_date: moment(item.settlement_date).format('MMM DD, YYYY') }\n        });\n        setCompanyLastUpdatedOn(a.data_last_updated)\n        setCompanyData(newData)\n        return a\n      })\n      .catch(error => console.log(error))\n  }\n\n  function handleSearchSelection(item) {\n    setCompanySymbol(item.symbol);\n    console.log(item)\n    setCompanyName(item.name);\n    setGraphShown(true);\n    fetchSettlementsForCompany(item.id)\n  }\n\n  function resetHomePage() {\n    setGraphShown(false);\n  }\n\n  let graph, dataRetrievedDate;\n  if (graphShown) {\n    graph = <CompanyGraph selectedCompanyName={companyName} selectedCompanySymbol={companySymbol} selectedCompanyData={companyData}></CompanyGraph>\n    dataRetrievedDate = <p>{\"Data last updated on \" + moment(companyLastUpdatedOn).format('MMM DD, YYYY')}</p>\n  }\n\n  return (\n    <DocumentMeta {...meta}>\n    <div className=\"Home\">\n      <div className=\"Title\" onClick={resetHomePage}>Fails-to-Deliver Data</div>\n      <div className=\"SearchBar\">\n        <SearchBar onSelectCompany={handleSearchSelection} onClearSearch={resetHomePage} style={{ width: '50%' }} />\n      </div>\n      <br />\n      {graph}\n      {dataRetrievedDate}\n    </div>\n    </DocumentMeta>\n  );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}